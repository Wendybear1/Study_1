from __future__ import division
import numpy as np
import scipy.signal
from matplotlib import pyplot
import math
from scipy import signal
from scipy.signal import butter, lfilter,iirfilter
from scipy.signal import hilbert
import pandas as pd
from statsmodels.tsa.api import SARIMAX
from statsmodels.tsa.api import SARIMAX


def movingaverage(values, window_size):
    weights = (np.ones(window_size))/window_size
    a=np.ones(1)
    return lfilter(weights,a,values)


# a universal model, can change parameters for tuning
def forecast_model(signal):
    forecast_signal = []
    for k in range(27):
        select_signal = signal[0:(19450 + 240 * 3 * k)]
        signal_cycle = movingaverage(select_signal, 240 * 6) # 6h cycle
        shift_signal = signal_cycle[(240 * 6 + 240 * 3 * k):(19450 + 240 * 3 * k)] # change 3h signal each time

        target_arr = []
        for i in range(450): # determined by the length of signal
            target_arr.append(shift_signal[i * 40]) # downsampling to 10 min
        data = target_arr

        my_order = (1, 1, 1) # parameters
        my_seasonal_order = (1, 1, 1, 144)
        model = SARIMAX(data, order=my_order, seasonal_order=my_seasonal_order)
        model_fit = model.fit()
        forecast_signal.append(model_fit.predict(450, 467))

    return forecast_signal


def read_feature_csv(directory):
    csv_reader = pd.read_csv(directory,
                             sep=',', header=None)
    rawfeature = csv_reader.values
    rawfeature_arr = []
    for item in rawfeature:
        rawfeature_arr.append(float(item))

    return rawfeature_arr



# ### forecast EEG var
Raw_var_EEG_arr=read_feature_csv('/fred/oz132/channels/PNES/channels/QLD0290_pure/Cz_EEGvariance_QLD0290_15s_3h.csv')
var_arr=[]
for item in Raw_var_EEG_arr:
    if item<1e-8:
        var_arr.append(item)
    else:
        var_arr.append(var_arr[-1])
Raw_var_EEG_arr=var_arr
forecast_var_EEG_arr=forecast_model(Raw_var_EEG_arr)



# ### forecast EEG auto
Raw_auto_EEG_arr=read_feature_csv('/fred/oz132/channels/PNES/channels/QLD0290_pure/Cz_EEGauto_QLD0290_15s_3h.csv')
value_arr=[0]
for item in Raw_auto_EEG_arr:
    if item<500:
        value_arr.append(item)
    else:
        value_arr.append(value_arr[-1])
Raw_auto_EEG_arr=value_arr
forecast_auto_EEG_arr=forecast_model(Raw_auto_EEG_arr)




# ### forecast RRI var
Raw_variance_RRI31_arr=read_feature_csv('/fred/oz132/channels/PNES//RRI_ch31_rawvariance_QLD0290_15s_3h.csv')
forecast_var_RRI31_arr=forecast_model(Raw_variance_RRI31_arr)




# ### forecast RRI auto
Raw_auto_RRI31_arr=read_feature_csv('/fred/oz132/channels/PNES//RRI_ch31_rawauto_QLD0290_15s_3h.csv')
forecast_auto_RRI31_arr=forecast_model(Raw_auto_RRI31_arr)






# plot forecast signals
t_window_arr = np.linspace(0, 0 + 0.00416667 * (len(Raw_var_EEG_arr) - 1), len(Raw_var_EEG_arr))

fore_arr_EEGvars = []
for k in range(81, 82):
    variance_arr = Raw_var_EEG_arr[0:(19450 + 240 * k)]
    long_rhythm_var_arr = movingaverage(variance_arr, 240 *6)
    pyplot.figure(figsize=(6, 3))
    pyplot.title('EEG variance')
    pyplot.ylabel('Voltage ($\mathregular{v^2}$)')
    pyplot.xlabel('Time(h)')
    pyplot.plot(t_window_arr[240 * 24:(19450 + 240 * k)], long_rhythm_var_arr[240 * 24:], 'orange')
t = np.linspace(t_window_arr[19450], t_window_arr[19450] + 0.1666667 * (len(forecast_var_EEG_arr) - 1),
                len(forecast_var_EEG_arr))
pyplot.plot(t, forecast_var_EEG_arr, 'k', label='forecast EEG var')
pyplot.legend()
pyplot.show()




fore_arr_EEGauto = []
for k in range(81, 82):
    auto_arr = Raw_auto_EEG_arr[0:(19450 + 240 * k)]
    long_rhythm_auto_arr = movingaverage(auto_arr, 240 * 6)
    pyplot.figure(figsize=(6, 3))
    pyplot.title('EEG autocorrelation')
    pyplot.xlabel('time(h)')
    pyplot.plot(t_window_arr[240 * 24:(19450 + 240 * k)], long_rhythm_auto_arr[240 * 24:], 'orange')
t = np.linspace(t_window_arr[19450], t_window_arr[19450] + 0.1666667 * (len(forecast_auto_EEG_arr) - 1),
                len(forecast_auto_EEG_arr))
pyplot.plot(t, forecast_auto_EEG_arr, 'k', label='forecast EEG auto')
pyplot.legend()
pyplot.show()


fore_arr_RRIvars = []
for k in range(81, 82):
    variance_arr = Raw_variance_RRI31_arr[0:(19450 + 240 * k)]
    long_rhythm_var_arr = movingaverage(variance_arr, 240 * 6)
    pyplot.figure(figsize=(6, 3))
    pyplot.title('RRI variance')
    pyplot.ylabel('Second ($\mathregular{s^2}$)')
    pyplot.xlabel('Time(h)')
    pyplot.plot(t_window_arr[240 * 24:(19450 + 240 * k)], long_rhythm_var_arr[240 * 24:], 'orange')

t = np.linspace(t_window_arr[19450], t_window_arr[19450] + 0.1666667 * (len(forecast_var_RRI31_arr) - 1),
                len(forecast_var_RRI31_arr))
pyplot.plot(t, forecast_var_RRI31_arr, 'k', label='forecast RRI var')
pyplot.legend()
pyplot.show()

fore_arr_RRIautos = []
save_data_RRIautos = []
for k in range(81, 82):
    auto_arr = Raw_auto_RRI31_arr[0:19450 + 240 * k]
    long_rhythm_auto_arr = movingaverage(auto_arr, 240 * 6)
    pyplot.figure(figsize=(6, 3))
    pyplot.title('RRI autocorrelation')
    pyplot.xlabel('Time(h)')
    pyplot.plot(t_window_arr[240 * 24:19450 + 240 * k], long_rhythm_auto_arr[240 * 24:], 'orange')
t = np.linspace(t_window_arr[19450], t_window_arr[19450] + 0.1666667 * (len(forecast_auto_RRI31_arr) - 1),
                len(forecast_auto_RRI31_arr))
pyplot.plot(t, forecast_auto_RRI31_arr, 'k', label='forecast RRI auto')
pyplot.legend()
pyplot.show()
